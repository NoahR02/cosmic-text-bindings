#pragma once

/* Warning, this file is autogenerated by cbindgen. Don't modify this manually. */

#include <stdarg.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdlib.h>


#ifdef __cplusplus
namespace cosmic_text {
#endif // __cplusplus

typedef enum Cosmic_Text_Shaping {
    /**
     * Basic shaping with no font fallback.
     *
     * This shaping strategy is very cheap, but it will not display complex
     * scripts properly nor try to find missing glyphs in your system fonts.
     *
     * You should use this strategy when you have complete control of the text
     * and the font you are displaying in your application.
     */
    Cosmic_Text_Shaping_Basic,
    /**
     * Advanced text shaping and font fallback.
     *
     * You will need to enable this strategy if the text contains a complex
     * script, the font used needs it, and/or multiple fonts in your system
     * may be needed to display all of the glyphs.
     */
    Cosmic_Text_Shaping_Advanced,
} Cosmic_Text_Shaping;

typedef enum Cosmic_Text_Stretch {
    Cosmic_Text_Stretch_UltraCondensed,
    Cosmic_Text_Stretch_ExtraCondensed,
    Cosmic_Text_Stretch_Condensed,
    Cosmic_Text_Stretch_SemiCondensed,
    Cosmic_Text_Stretch_Normal,
    Cosmic_Text_Stretch_SemiExpanded,
    Cosmic_Text_Stretch_Expanded,
    Cosmic_Text_Stretch_ExtraExpanded,
    Cosmic_Text_Stretch_UltraExpanded,
} Cosmic_Text_Stretch;

typedef enum Cosmic_Text_Style {
    /**
     * A face that is neither italic not obliqued.
     */
    Cosmic_Text_Style_Normal,
    /**
     * A form that is generally cursive in nature.
     */
    Cosmic_Text_Style_Italic,
    /**
     * A typically-sloped version of the regular face.
     */
    Cosmic_Text_Style_Oblique,
} Cosmic_Text_Style;

typedef struct Cosmic_Text_Buffer Cosmic_Text_Buffer;

typedef struct Cosmic_Text_FontSystem Cosmic_Text_FontSystem;

typedef struct Cosmic_Text_SwashCache Cosmic_Text_SwashCache;

typedef struct Cosmic_Text_Color {
    uint32_t _0;
} Cosmic_Text_Color;

typedef enum Cosmic_Text_Family_Tag {
    /**
     * The name of a font family of choice.
     *
     * This must be a *Typographic Family* (ID 16) or a *Family Name* (ID 1) in terms of TrueType.
     * Meaning you have to pass a family without any additional suffixes like _Bold_, _Italic_,
     * _Regular_, etc.
     *
     * Localized names are allowed.
     */
    Cosmic_Text_Family_Name,
    /**
     * Serif fonts represent the formal text style for a script.
     */
    Cosmic_Text_Family_Serif,
    /**
     * Glyphs in sans-serif fonts, as the term is used in CSS, are generally low contrast
     * and have stroke endings that are plain â€” without any flaring, cross stroke,
     * or other ornamentation.
     */
    Cosmic_Text_Family_SansSerif,
    /**
     * Glyphs in cursive fonts generally use a more informal script style,
     * and the result looks more like handwritten pen or brush writing than printed letterwork.
     */
    Cosmic_Text_Family_Cursive,
    /**
     * Fantasy fonts are primarily decorative or expressive fonts that
     * contain decorative or expressive representations of characters.
     */
    Cosmic_Text_Family_Fantasy,
    /**
     * The sole criterion of a monospace font is that all glyphs have the same fixed width.
     */
    Cosmic_Text_Family_Monospace,
} Cosmic_Text_Family_Tag;

typedef struct Cosmic_Text_Family {
    Cosmic_Text_Family_Tag tag;
    union {
        struct {
            const char *name;
        };
    };
} Cosmic_Text_Family;

typedef struct Cosmic_Text_Weight {
    uint16_t _0;
} Cosmic_Text_Weight;

/**
 * Flags that change rendering
 */
typedef uint32_t Cosmic_Text_CacheKeyFlags;
/**
 * Skew by 14 degrees to synthesize italic
 */
#define Cosmic_Text_CacheKeyFlags_FAKE_ITALIC (uint32_t)1

typedef struct Cosmic_Text_CacheMetrics {
    uint32_t font_size_bits;
    uint32_t line_height_bits;
} Cosmic_Text_CacheMetrics;

typedef struct Cosmic_Text_Attrs {
    const struct Cosmic_Text_Color *color_opt;
    struct Cosmic_Text_Family family;
    enum Cosmic_Text_Stretch stretch;
    enum Cosmic_Text_Style style;
    struct Cosmic_Text_Weight weight;
    size_t metadata;
    Cosmic_Text_CacheKeyFlags cache_key_flags;
    const struct Cosmic_Text_CacheMetrics *metrics_opt;
} Cosmic_Text_Attrs;

typedef struct Cosmic_Text_Metrics {
    /**
     * Font size in pixels
     */
    float font_size;
    /**
     * Line height in pixels
     */
    float line_height;
} Cosmic_Text_Metrics;

typedef struct Cosmic_Text_ColorRGBA {
    uint8_t r;
    uint8_t g;
    uint8_t b;
    uint8_t a;
} Cosmic_Text_ColorRGBA;

#ifdef __cplusplus
extern "C" {
#endif // __cplusplus

struct Cosmic_Text_Attrs attrs_constructor(void);

struct Cosmic_Text_Buffer *buffer_constructor(struct Cosmic_Text_FontSystem **font_system,
                                              struct Cosmic_Text_Metrics metrics);

void buffer_destructor(struct Cosmic_Text_Buffer *buffer);

void buffer_draw(struct Cosmic_Text_Buffer *buffer,
                 struct Cosmic_Text_FontSystem *font_system,
                 struct Cosmic_Text_SwashCache *swash_cache,
                 struct Cosmic_Text_Color color,
                 void *void_ptr,
                 void (*draw_fn)(void*,
                                 int32_t,
                                 int32_t,
                                 uint32_t,
                                 uint32_t,
                                 struct Cosmic_Text_Color));

void buffer_set_size(struct Cosmic_Text_Buffer *buffer,
                     struct Cosmic_Text_FontSystem *font_system,
                     float width,
                     float height);

void buffer_set_text(struct Cosmic_Text_Buffer *buffer,
                     struct Cosmic_Text_FontSystem *font_system,
                     const char *text,
                     struct Cosmic_Text_Attrs attrs,
                     enum Cosmic_Text_Shaping shaping);

void buffer_shape_until_scroll(struct Cosmic_Text_Buffer *buffer,
                               struct Cosmic_Text_FontSystem *font_system,
                               bool prune);

uint8_t color_a(struct Cosmic_Text_Color self);

struct Cosmic_Text_ColorRGBA color_as_rgba(struct Cosmic_Text_Color self);

uint8_t color_b(struct Cosmic_Text_Color self);

uint8_t color_g(struct Cosmic_Text_Color self);

uint8_t color_r(struct Cosmic_Text_Color self);

struct Cosmic_Text_Color color_rgba(uint8_t r, uint8_t g, uint8_t b, uint8_t a);

struct Cosmic_Text_FontSystem *font_system_constructor(void);

void font_system_destructor(struct Cosmic_Text_FontSystem *font_system);

struct Cosmic_Text_Metrics metrics_constructor(float font_size, float line_height);

struct Cosmic_Text_SwashCache *swash_cache_constructor(void);

void swash_cache_destructor(struct Cosmic_Text_SwashCache *swash_cache);

#ifdef __cplusplus
} // extern "C"
#endif // __cplusplus

#ifdef __cplusplus
} // namespace cosmic_text
#endif // __cplusplus
